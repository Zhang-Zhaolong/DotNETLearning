1. Describe the problem generics address.
Generics allow for type safety while enabling code reuse. They help avoid boxing/unboxing overhead and eliminate the need for typecasting by allowing classes, methods, and collections to work with any data type while enforcing type safety.

2. How would you create a list of strings, using the generic List class?
List<string> myList = new List<string>();

3. How many generic type parameters does the Dictionary class have?
Two (Dictionary<TKey, TValue>), where TKey represents the key type and TValue represents the value type.

4. True/False. When a generic class has multiple type parameters, they must all match.
False 

5. What method is used to add items to a List object?
.Add(), e.g., myList.Add("Hello");

6. Name two methods that cause items to be removed from a List.
.Remove(item) – Removes the first occurrence of a specific item.
.RemoveAt(index) – Removes the item at the specified index.

7. How do you indicate that a class has a generic type parameter?
class MyClass<T> { }

8. True/False. Generic classes can only have one generic type parameter.
False

9. True/False. Generic type constraints limit what can be used for the generic type.
True

10. True/False. Constraints let you use the methods of the thing you are constraining to.
True
